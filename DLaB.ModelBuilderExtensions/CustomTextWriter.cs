using System.IO;
using System.Text;

namespace DLaB.ModelBuilderExtensions
{
    internal class CustomTextWriter : TextWriter
    {
        private readonly TextWriter _default;
        private bool _skipRuntimeVersionComment;
        private bool _skipEntireHeaderComment;
        private int _commentSpacesCount;
        private const string CodeGeneratedByATool = "This code was generated by a tool."; // This line is the line before the RuntimeVersion comment
        private const string CommentSpaces = "//------------------------------------------------------------------------------"; // This the start and end of the header comment
        private bool _skipCurrentLine;

        public CustomTextWriter(TextWriter @default, bool skipRuntimeVersionComment, bool skipEntireHeaderComment)
        {
            _default = @default;
            _skipRuntimeVersionComment = skipRuntimeVersionComment;
            _skipEntireHeaderComment = skipEntireHeaderComment;
        }

        public override void WriteLine(string s)
        {
            if (_skipEntireHeaderComment)
            {
                if(s == CommentSpaces)
                {
                    _commentSpacesCount++;
                }
                switch (_commentSpacesCount)
                {
                    case 1:
                        _skipCurrentLine = true;
                        return;
                    case 2:
                        _skipEntireHeaderComment = false;
                        _skipCurrentLine = false;
                        return;
                }
            }
            if (_skipRuntimeVersionComment)
            {
                if (_skipCurrentLine)
                {
                    _skipCurrentLine = false;
                    _skipRuntimeVersionComment = false;
                    return;
                }
                _skipCurrentLine = s == CodeGeneratedByATool;
            }
            _default.WriteLine(s);
        }

        public override void Write(string value)
        {
            if (_skipCurrentLine)
            {
                return;
            }
            _default.Write(value);
        }

        public override void Write(char value)
        {
            _default.Write(value);
        }

        public override Encoding Encoding => _default.Encoding;

        /// <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally releases the managed resources.</summary>
        /// <param name="disposing">
        /// <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            _default.Dispose();
        }
    }
}
